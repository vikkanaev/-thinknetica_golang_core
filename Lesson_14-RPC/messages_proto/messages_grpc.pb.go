// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: messages_proto/messages.proto

package messages_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SignalmanClient is the client API for Signalman service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignalmanClient interface {
	Messages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Signalman_MessagesClient, error)
	Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error)
}

type signalmanClient struct {
	cc grpc.ClientConnInterface
}

func NewSignalmanClient(cc grpc.ClientConnInterface) SignalmanClient {
	return &signalmanClient{cc}
}

func (c *signalmanClient) Messages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Signalman_MessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Signalman_ServiceDesc.Streams[0], "/protobuf.Signalman/Messages", opts...)
	if err != nil {
		return nil, err
	}
	x := &signalmanMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Signalman_MessagesClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type signalmanMessagesClient struct {
	grpc.ClientStream
}

func (x *signalmanMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *signalmanClient) Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protobuf.Signalman/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignalmanServer is the server API for Signalman service.
// All implementations must embed UnimplementedSignalmanServer
// for forward compatibility
type SignalmanServer interface {
	Messages(*Empty, Signalman_MessagesServer) error
	Send(context.Context, *Message) (*Empty, error)
	mustEmbedUnimplementedSignalmanServer()
}

// UnimplementedSignalmanServer must be embedded to have forward compatible implementations.
type UnimplementedSignalmanServer struct {
}

func (UnimplementedSignalmanServer) Messages(*Empty, Signalman_MessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method Messages not implemented")
}
func (UnimplementedSignalmanServer) Send(context.Context, *Message) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedSignalmanServer) mustEmbedUnimplementedSignalmanServer() {}

// UnsafeSignalmanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignalmanServer will
// result in compilation errors.
type UnsafeSignalmanServer interface {
	mustEmbedUnimplementedSignalmanServer()
}

func RegisterSignalmanServer(s grpc.ServiceRegistrar, srv SignalmanServer) {
	s.RegisterService(&Signalman_ServiceDesc, srv)
}

func _Signalman_Messages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SignalmanServer).Messages(m, &signalmanMessagesServer{stream})
}

type Signalman_MessagesServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type signalmanMessagesServer struct {
	grpc.ServerStream
}

func (x *signalmanMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Signalman_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalmanServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Signalman/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalmanServer).Send(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// Signalman_ServiceDesc is the grpc.ServiceDesc for Signalman service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Signalman_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Signalman",
	HandlerType: (*SignalmanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Signalman_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Messages",
			Handler:       _Signalman_Messages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messages_proto/messages.proto",
}
