package api

import (
	"log"
	"net/http"
	"strconv"
	"strings"

	"github.com/gorilla/mux"
)

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ä —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ - —Å—Å—ã–ª–∫–∞
func (api *API) urls(w http.ResponseWriter, r *http.Request) {
	data, err := api.rpc.Urls()
	if err != nil {
		responseErr(w, http.StatusInternalServerError, err.Error())
		return
	}
	responseOk(w, data, http.StatusOK)
}

// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª—è –Ω–µ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ
func (api *API) newUrl(w http.ResponseWriter, r *http.Request) {
	shortUrl, err := api.rpc.NewUrl(r)
	if err != nil {
		responseErr(w, http.StatusUnprocessableEntity, err.Error())
		return
	}

	responseOk(w, shortUrl, http.StatusOK)
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
func (api *API) url(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	key := vars["key"]

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫–µ—à–µ
	// –û—à–∏–±–∫—É –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ç–æ–º—É, —á—Ç–æ –¥–∞–∂–µ –µ—Å–ª–∏ –∫–µ—à –ø—Ä–∏–ª–µ–≥ –º—ã —Å—Ö–æ–¥–∏–º –≤ —Å—Ç–æ—Ä–µ–¥–∂
	url, _ := api.rpc.CachedUrl(key)

	if url != "" {
		// –ü–µ—á–∞—Ç–∞–µ–º üòé –≤ –ª–æ–≥
		log.Printf("%s Url %v got from cache", unquoteCodePoint("\\U0001f60e"), key)
		http.Redirect(w, r, url, http.StatusSeeOther)
		return
	}

	// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∫–µ—à–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	url, err := api.rpc.Url(key)
	if err != nil {
		responseErr(w, http.StatusUnprocessableEntity, err.Error())
		return
	}
	// –ü–µ—á–∞—Ç–∞–µ–º üëø –≤ –ª–æ–≥
	log.Printf("%s Url %v got from storage", unquoteCodePoint("\\U0001f47f"), key)

	if url == "" {
		responseErr(w, http.StatusNotFound, nil)
		return
	}
	http.Redirect(w, r, url, http.StatusSeeOther)
}

// –í—ã–≤–æ–¥–∏—Ç –Æ–Ω–∏–∫–æ–¥ emoji
func unquoteCodePoint(s string) string {
	r, _ := strconv.ParseInt(strings.TrimPrefix(s, "\\U"), 16, 32)
	return string(r)
}
